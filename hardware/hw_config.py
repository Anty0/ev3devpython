import sys

from ev3dev.auto import INPUT_3, INPUT_4, OUTPUT_A, OUTPUT_B, OUTPUT_C, OUTPUT_D

from utils.calc.position import Position2D

# Robot
ROBOT_WIDTH = 15
ROBOT_LENGTH = 23
ROBOT_HEIGHT = 16
ROBOT_WEIGHT = 0  # TODO: measure
# TODO: ROBOT_CENTER_OFFSET


# Main Brick
BRICK_POSITION = Position2D(0, -3, 0)

# Left wheel
WHEEL_MOTOR_LEFT_PORT = OUTPUT_B
WHEEL_MOTOR_LEFT_DIAMETER = 4.3
WHEEL_MOTOR_LEFT_WIDTH = 2.1
WHEEL_MOTOR_LEFT_GEAR_RATIO = 1
WHEEL_MOTOR_LEFT_VISUAL_ROTATION_WAY = -1
WHEEL_MOTOR_LEFT_POSITION = Position2D(-6, 0, -90)

# Right wheel
WHEEL_MOTOR_RIGHT_PORT = OUTPUT_C
WHEEL_MOTOR_RIGHT_DIAMETER = 4.3
WHEEL_MOTOR_RIGHT_WIDTH = 2.1
WHEEL_MOTOR_RIGHT_GEAR_RATIO = 1
WHEEL_MOTOR_RIGHT_VISUAL_ROTATION_WAY = 1
WHEEL_MOTOR_RIGHT_POSITION = Position2D(6, 0, 90)

# Distance scanner
SCANNER_DISTANCE_HEAD_PORT = INPUT_4
SCANNER_DISTANCE_HEAD_POSITION = Position2D(0, 10.5, 0)

SCANNER_DISTANCE_PROPULSION_PORT = OUTPUT_A
SCANNER_DISTANCE_PROPULSION_GEAR_RATIO = -20 / 12
SCANNER_DISTANCE_PROPULSION_VISUAL_ROTATION_WAY = 1
SCANNER_DISTANCE_PROPULSION_POSITION = Position2D(0, 0, 0)

# Reflect scanner
SCANNER_REFLECT_HEAD_PORT = INPUT_3
SCANNER_REFLECT_HEAD_POSITION = Position2D(0, 9.5, 0)

SCANNER_REFLECT_PROPULSION_PORT = OUTPUT_D
SCANNER_REFLECT_PROPULSION_GEAR_RATIO = -20 / 12
SCANNER_REFLECT_PROPULSION_VISUAL_ROTATION_WAY = 1
SCANNER_REFLECT_PROPULSION_POSITION = Position2D(0, 5.5, 0)

# Fast configuration mode
if '--hw-fast' in sys.argv:
    WHEEL_MOTOR_LEFT_GEAR_RATIO = -12 / 36
    WHEEL_MOTOR_RIGHT_GEAR_RATIO = -12 / 36

    offset = Position2D(0, -2.4, 0)
    BRICK_POSITION = BRICK_POSITION.offset_by(offset)
    WHEEL_MOTOR_LEFT_POSITION = WHEEL_MOTOR_LEFT_POSITION.offset_by(offset)
    WHEEL_MOTOR_RIGHT_POSITION = WHEEL_MOTOR_RIGHT_POSITION.offset_by(offset)
    SCANNER_DISTANCE_HEAD_POSITION = SCANNER_DISTANCE_HEAD_POSITION.offset_by(offset)
    SCANNER_DISTANCE_PROPULSION_POSITION = SCANNER_DISTANCE_PROPULSION_POSITION.offset_by(offset)
    SCANNER_REFLECT_HEAD_POSITION = SCANNER_REFLECT_HEAD_POSITION.offset_by(offset)
    SCANNER_REFLECT_PROPULSION_POSITION = SCANNER_REFLECT_PROPULSION_POSITION.offset_by(offset)
    del offset
